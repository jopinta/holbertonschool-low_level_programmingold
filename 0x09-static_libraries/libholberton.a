!<arch>
0-isupper.c/    0           0     0     644     244       `
#include "holberton.h"
#include <stdio.h>

/**
 * _isupper - check whether c (unsigned char) falls where.
 *@c: uppercase
 * Return: Always 0.
 */

int _isupper(int c)
{
  if (c >= 'A' && c <= 'Z')
    {
      return (1);
    }
  return (0);
}
0-memset.c/     0           0     0     644     327       `
#include "holberton.h"

/**
 *_memset - fill memory with a constant byte
 * @s: the address of memory to print
 * @b: the size of the memory to print
 *@n: unsigned
 * Return: Nothing.
 */
char *_memset(char *s, char b, unsigned int n)
{
  unsigned int i;

  for (i = 0; i < n; i++)
    {
      s[i] = b;
    }
  return (s);
}

0-strcat.c/     0           0     0     644     348       `
#include "holberton.h"
#include <stdio.h>

/**
 ** _strcat- check the code for Holberton School students.
 *@dest: ki
 *@src: lo
 * Return: (i).
 */
char *_strcat(char *dest, char *src)
{
  char *i = dest;


  for (; *i != '\0'; i++)
    {
    }
  for (; *src != '\0'; src++)
    {
      *i = *src;
      i++;
    }
  *i = '\0';
  return (dest);
}
1-isdigit.c/    0           0     0     644     261       `
#include "holberton.h"
#include <stdio.h>

/**
 * _isdigit - test whether c is a char clas digit
 *@c:c argument is an int (unsigned char)
 * Return: Always 0.
 */
int _isdigit(int c)
{

  if (c >= '0' && c <= '9')
    {
      return (1);
    }
  return (0);
}

1-memcpy.c/     0           0     0     644     316       `
#include "holberton.h"

/**
 * _memcpy - prints buffer in hexa
 * @dest: the address of memory to print
 * @src: the size of the memory to print
 *@n: ene
 * Return: Nothing.
 */

char *_memcpy(char *dest, char *src, unsigned int n)
{
unsigned int i = 0;

while (i < n)
  {
dest[i] = src[i];
i++;
}
return (dest);
}
1-strncat.c/    0           0     0     644     359       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strncat - Str
 * @dest: dest
 * @src: src
 * @n: num
 * Return: dest
 */

char *_strncat(char *dest, char *src, int n)
{
  int z;
  int x;

  z = x = 0;
  while (dest[z] != '\0')
    z += 1;
  while (x < n && src[x] != '\0')
    {
      dest[z] = src[x];
      x += 1;
      z += 1;
    }
  return (dest);
}

2-strchr.c/     0           0     0     644     263       `
#include "holberton.h"

/**
 *_strchr - string scanning operation.
 *@s: src
 *@c: dst
 * Return: Always 0.
 */

char *_strchr(char *s, char c)
{
  for (; 1; s++)
    {
      if (s[0] == c)
	break;
      else if (s[0] == '\0')

	return (0);
    }
  return (s);
}

2-strlen.c/     0           0     0     644     180       `
#include "holberton.h"

/**
 * _strlen - loco..
 *@s: number
 *
 * Return: void.
 */
int _strlen(char *s)
{
  int i;

  for (i = 0; s[i] != '\0'; i++)
    {
    }

  return (i);
}
2-strncpy.c/    0           0     0     644     365       `
#include "holberton.h"
#include <stdio.h>

/**
 * _strncpy - Strn
 * @dest: dest
 * @src: src
 * @n: number
 *
 * Return: dest
 */

char *_strncpy(char *dest, char *src, int n)
{
  int z;

  z = 0;
  while (src[z] != '\0' && z < n)
    {
      dest[z] = src[z];
      z += 1;
    }
  while (z < n)
    {
      dest[z] = '\0';
      z += 1;
    }
  return (dest);
}

3-islower.c/    0           0     0     644     199       `
#include "holberton.h"

/**
 * _islower - check lower case char.
 *@c: char
 * Return: Always 0.
 */
int _islower(int c)
{


  if (c >= 'a' && c <= 'z')
    {
      return (1);
    }
  return (0);
}

3-puts.c/       0           0     0     644     208       `
#include "holberton.h"

/**
 * _puts - puts
 *@str: numero
 *
 * Return: void.
 */
void _puts(char *str)
{
  int i;

  for (i = 0; str[i] != '\0'; i++)
    {
      _putchar(str[i]);
    }
  _putchar('\n');
}
3-strcmp.c/     0           0     0     644     366       `
#include "holberton.h"

/**
 * _strcmp - Entry point
 * @s2: wopa
 * @s1: woopa
 *
 * Description: Show a message blablabla
 * Return: Always 0 (Success)
 */

int _strcmp(char *s1, char *s2)
{
  int count = 0;

  while (s1[count] == s2[count])
    {
      count++;
      if (s1[count] == '\0' && s2[count] == '\0')
	break;
    }

  return (s1[count] - s2[count]);
}
3-strspn.c/     0           0     0     644     527       `
#include "holberton.h"
/**
 * _strspn - Entry point
 * @s: String
 * @accept: String
 *
 * Description: Gets the length of a prefix
 * Return: number of bytes in the initial segment
 */
unsigned int _strspn(char *s, char *accept)
{
  int i = 0, j = 0, flag = 1;
  unsigned int ret = 0;

  for (i = 0 ; s[i] != '\0' ; i++)
    {
      flag = 1;
      for (j = 0 ; accept[j] != '\0' ; j++)
	{
	  if (s[i] == accept[j])
	    {
	      ret++;
	      flag = 0;
	      break;
	    }
	}
      if (flag)
	break;
    }
  return (ret);
}

4-isalpha.c/    0           0     0     644     241       `
#include "holberton.h"

/**
 * _isalpha - check alphabetic character.
 *@c: number to work
 * Return: Always 0.
 */

int _isalpha(int c)
{
  if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
    {
      return (1);
    }
  return (0);
}

4-strpbrk.c/    0           0     0     644     385       `
#include "holberton.h"
/**
 *_strpbrk - search a string for any of a set of bytes.
 *
 *
 *@s: str
 *@accept: str 2
 * Return: Always 0.
 */
char *_strpbrk(char *s, char *accept)
{
int i, j, flag = 0;
char *x = 0;

for (i = 0; s[i] != '\0'; i++)
  {
for (j = 0 ; accept[j] != '\0'; j++)
  {
if (s[i] == accept[j])
  {
x = &s[i];
flag = 1;
break;
}
}
if (flag)
  break;
}
return (x);
}

5-strstr.c/     0           0     0     644     487       `
#include "holberton.h"

/**
 * _strstr - locate substring in a string
 * @haystack: the string to scan
 * @needle: the substring
 * ------------------------------------------------
 * Return: char pointer "p"
 */
char *_strstr(char *haystack, char *needle)
{
  int i, j;

  for (i = 0; haystack[i] != '\0'; i++)
    {
      for (j = 0; needle[j] != '\0'; j++)
	{
	  if (haystack[i + j] != needle[j])
	    break;
	}

      if (!needle[j])
	return ((haystack + i));
    }

  return (0);
}

6-abs.c/        0           0     0     644     216       `
#include "holberton.h"

/**
 * _abs - compute the absolute value of an integer.
 *@x: it's what we do
 * Return: Always 0.
 */

int _abs(int x)
{
  if (x < 0)
    {
      return (-x);
    }
  {
    return (x);
  }
}
9-strcpy.c/     0           0     0     644     346       `
#include "holberton.h"
#include "2-strlen.c"
/**
 * _strcpy - ul
 * @dest: des
 * @src: src
 *
 * Description: Copy a string from source to destination
 * Return: string destination
 */
char *_strcpy(char *dest, char *src)
{
  int i = 0, len = _strlen(src);

  for (i = 0 ; i <= len ; i++)
    {
      dest[i] = src[i];
    }
  return (dest);
 }
_putchar.c/     0           0     0     644     248       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
  return (write(1, &c, 1));
}
